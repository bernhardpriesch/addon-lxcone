#!/bin/bash

source $(dirname $0)/../../scripts_common.sh
DEPLOY_FILE=$1
DEPLOY_NUM=$(echo $DEPLOY_FILE | cut -d '.' -f 2)

# First, check if loop devices are up
if [ ! -f /dev/loop0 ]; then
 sudo losetup -f
fi

##############################################################################
#                            	XPATH                                        #
##############################################################################
echo "$DEPLOY_FILE"

XPATH="/var/tmp/one/datastore/xpath.rb --stdin"

unset i j XPATH_ELEMENTS

while read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <($XPATH 	/VM/ID \
			/VM/NAME \
			/VM/TEMPLATE/MEMORY \
			/VM/TEMPLATE/CPU \
                        /VM/TEMPLATE/CONTEXT/ETH0_MASK \
                       	/VM/TEMPLATE/NIC/MAC \
                        /VM/TEMPLATE/CONTEXT/ETH0_GATEWAY \
			/VM/TEMPLATE/CONTEXT/DISK_ID \
			/VM/TEMPLATE/DISK/TYPE \
			/VM/TEMPLATE/DISK/IMAGE_ID \
			/VM/HISTORY_RECORDS/HISTORY/DS_ID \
			/VM/TEMPLATE/GRAPHICS/PASSWD \
			/VM/TEMPLATE/GRAPHICS/PORT \
			/VM/TEMPLATE/DISK/SOURCE \
			/VM/TEMPLATE/DISK/PERSISTENT \
			/VM/TEMPLATE/DISK/CLONE \
			/VM/TEMPLATE/GRAPHICS/LISTEN \
			/VM/TEMPLATE/DISK/TM_MAD)

VM_ID="${XPATH_ELEMENTS[0]}"
VM_HOSTNAME="${XPATH_ELEMENTS[1]}"
VM_MEMORY="${XPATH_ELEMENTS[2]}"
VM_CPUs="${XPATH_ELEMENTS[3]}"
VM_NIC_NETMASK="${XPATH_ELEMENTS[4]}"
VM_NIC_MAC="${XPATH_ELEMENTS[5]}"
VM_NIC_GATEWAY="${XPATH_ELEMENTS[6]}"
VM_DISKS="${XPATH_ELEMENTS[7]}"
VM_DISK_TYPE="${XPATH_ELEMENTS[8]}"
IMAGE_ID="${XPATH_ELEMENTS[9]}"
SYSTEM_DATASTORE_ID="${XPATH_ELEMENTS[10]}"
VM_VNC_PASSWD="${XPATH_ELEMENTS[11]}"
VM_VNC_PORT="${XPATH_ELEMENTS[12]}"
VM_DISK_SOURCE="${XPATH_ELEMENTS[13]}"
VM_DISK_PERSISTENT="${XPATH_ELEMENTS[14]}"
VM_DISK_CLONE="${XPATH_ELEMENTS[15]}"
VM_VNC_LISTEN="${XPATH_ELEMENTS[16]}"
VM_DISK_TM_MAD="${XPATH_ELEMENTS[17]}"

VM_HOSTNAME=${VM_HOSTNAME// /-}
VM_HOSTNAME_FIXED=${VM_HOSTNAME//_/-}

CEPH_AUTH=$(grep CEPH_ARGS /etc/environment | cut -d '"' -f 2)

# Create the directory where the containers will be stored #

if [ ! -d /var/lib/lxc/one-$VM_ID ]; then
	sudo mkdir -p /var/lib/lxc/one-$VM_ID
	sudo chown -R oneadmin:oneadmin /var/lib/lxc/one-$VM_ID
fi

##############################################################################
#                            	NETWORK                                      #
##############################################################################

TOTAL_iFACE=$(xmlstarlet sel -t -v "count(/VM/TEMPLATE/NIC/NETWORK_ID)" /var/lib/one/vms/${VM_ID}/deployment.$DEPLOY_NUM)
NIC_ID_LIST=$(xmlstarlet sel -t -v "/VM/TEMPLATE/NIC/NIC_ID" /var/lib/one/vms/${VM_ID}/deployment.$DEPLOY_NUM)

iFACE=0
while read rNIC; do
	NIC_ID[$iFACE]=$rNIC
	let iFACE=iFACE+1
done < <(echo -e "$NIC_ID_LIST")

#----
# IP
#----

iFACE=0
XML_PARSE=$(xmlstarlet sel -t -v "/VM/TEMPLATE/NIC/IP" /var/lib/one/vms/${VM_ID}/deployment.$DEPLOY_NUM)
while read IP; do
	IP_ETH[$iFACE]=$IP
	let iFACE=iFACE+1
done < <(echo -e "$XML_PARSE")

#iFACE=0
#while [ $iFACE -lt $TOTAL_iFACE ]; do
#        echo "$iFACE $TOTAL_iFACE"
#        RUTA=/VM/TEMPLATE/CONTEXT/ETH${iFACE}_IP
#        IP_ETH[$iFACE]=$(xmlstarlet sel -t -v "$RUTA" /var/lib/one/vms/${VM_ID}/deployment.$DEPLOY_NUM)
#        echo "IP: ${IP_ETH[$iFACE]}"
#        let iFACE=iFACE+1
#done

#---------
# NETMASK
#---------

iFACE=0
while [ $iFACE -lt $TOTAL_iFACE ]; do
        RUTA=/VM/TEMPLATE/CONTEXT/ETH${iFACE}_MASK
        MASK_ETH[$iFACE]=$(xmlstarlet sel -t -v "$RUTA" /var/lib/one/vms/${VM_ID}/deployment.$DEPLOY_NUM)

	if [ -n "${MASK_ETH[$iFACE]}" ]; then
	# Convert netmask to cidr notation #
		nbits=0
		IFS=.
		for dec in ${MASK_ETH[$iFACE]} ; do
        		case $dec in
                		255) let nbits+=8;;
                		254) let nbits+=7; break ;;
                		252) let nbits+=6; break ;;
                		248) let nbits+=5; break ;;
                		240) let nbits+=4; break ;;
                		224) let nbits+=3; break ;;
                		192) let nbits+=2; break ;;
                		128) let nbits+=1; break ;;
                		0);;
                		*) 
echo "{$MASK_ETH[$iFACE]} is an invalid netmask. Setting up /24" && export DEFAULT_NETMASK=24;;
       			esac
		done

		if [ "${DEFAULT_NETMASK}" = 24 ]
		then
			CIDR_MASK_ETH[$iFACE]=24
		else
			CIDR_MASK_ETH[$iFACE]=$nbits
		fi
	else
		CIDR_MASK_ETH[$iFACE]=24
	fi

        let iFACE=iFACE+1
done

#-----
# MAC
#-----

iFACE=0
XML_PARSE=$(xmlstarlet sel -t -v "/VM/TEMPLATE/NIC/MAC" /var/lib/one/vms/${VM_ID}/deployment.$DEPLOY_NUM)
while read MAC; do
        MAC_ETH[$iFACE]=$MAC
        let iFACE=iFACE+1
done < <(echo -e "$XML_PARSE")

#--------
# BRIDGE
#--------

iFACE=0
XML_PARSE=$(xmlstarlet sel -t -v "/VM/TEMPLATE/NIC/BRIDGE" /var/lib/one/vms/${VM_ID}/deployment.$DEPLOY_NUM)

while read BR; do
        BR_ETH[$iFACE]=$BR
        let iFACE=iFACE+1
done < <(echo -e "$XML_PARSE")

#---------
# GATEWAY
#---------

iFACE=0
while [ $iFACE -lt $TOTAL_iFACE ]; do
	echo "$iFACE $TOTAL_iFACE"
	RUTA=/VM/TEMPLATE/CONTEXT/ETH${iFACE}_GATEWAY
	GW_ETH[$iFACE]=$(xmlstarlet sel -t -v "$RUTA" /var/lib/one/vms/${VM_ID}/deployment.$DEPLOY_NUM)
	echo "Gateway: ${GW_ETH[$iFACE]}"
	if [ -n "${GW_ETH[$iFACE]}" ]; then
		GWs=$iFACE
		let GWs=GWs-1
		SAME_GW=0
		while [ $GWs -gt "-1" ]; do
			if [ "${GW_ETH[$iFACE]}" = "${GW_ETH[$GWs]}" ]; then
				SAME_GW=1
			fi
			let GWs=GWs-1
		done

		if [ $SAME_GW == "1" ]; then
			CONFIG_GW_ETH[$iFACE]="#lxc.network.ipv4.gateway = ${GW_ETH[$iFACE]} Already set up :)"
		else
			CONFIG_GW_ETH[$iFACE]="lxc.network.ipv4.gateway = ${GW_ETH[$iFACE]}"
		fi

	else
		CONFIG_GW_ETH[$iFACE]="#lxc.network.ipv4.gateway = ${GW_ETH[$iFACE]} No Gateway :("
	fi

	let iFACE=iFACE+1
done

#------------
#CONFIG-FILE
#------------

cnt_iface=0

while [ $cnt_iface -lt $iFACE ];do
echo "$cnt_iface $iFACE ${IP_ETH[$cnt_iface]}"
if [ -n "${IP_ETH[$cnt_iface]}" ]; then
	CONFIG_IP_ETH="lxc.network.ipv4 = ${IP_ETH[$cnt_iface]}/${CIDR_MASK_ETH[$cnt_iface]}"
else
	CONFIG_IP_ETH="#lxc.network.ipv4 = No IP :("
fi
NET_CONFIG="$NET_CONFIG $(cat << EOF

# ETH${cnt_iface}
lxc.utsname = $VM_HOSTNAME
lxc.network.type = veth
lxc.network.veth.pair= ${VM_ID}-eth${NIC_ID[$cnt_iface]}
lxc.network.flags = up
lxc.network.name = eth${NIC_ID[$cnt_iface]}
lxc.network.link = ${BR_ETH[$cnt_iface]}
lxc.network.hwaddr = ${MAC_ETH[$cnt_iface]}
${CONFIG_IP_ETH}
${CONFIG_GW_ETH[$cnt_iface]}
EOF
)"
let cnt_iface=cnt_iface+1
done < <(echo -e "$XML_PARSE")

############################################################################
#			rootfs						  #
###########################################################################

case $VM_DISK_TYPE in
	FILE) 	rootfs=loop:/var/lib/one/datastores/$SYSTEM_DATASTORE_ID/$VM_ID/disk.0
		RC_LOCAL=$(sudo grep "lxc-start -l ERROR -d -n one-$VM_ID" /etc/rc.local)
		if [ -z "$RC_LOCAL" ]; then
			sudo echo "lxc-start -l ERROR -d -n one-$VM_ID" > /var/lib/lxc/one-$VM_ID/init
			sudo echo "at now -f /var/lib/lxc/one-$VM_ID/init" > /tmp/rc.local.opennebula_temp
			sudo echo "#--------------------------------------------" >> /tmp/rc.local.opennebula_temp
			line_number=$(grep -in "exit 0" /etc/rc.local | tail -1 | cut -d ':' -f 1)
                	let line_number=line_number-1
                	sudo sed -i "$line_number r /tmp/rc.local.opennebula_temp" /etc/rc.local
		fi
		echo "sleep 5" > /var/lib/lxc/one-$VM_ID/clean
		echo "VM_STATE=\$(lxc-info -n one-$VM_ID | grep State | awk '{ print \$2 }')" >> /var/lib/lxc/one-$VM_ID/clean
                echo "if [ \"\$VM_STATE\" = \"STOPPED\" ]; then" >> /var/lib/lxc/one-$VM_ID/clean
                echo "start_line=\$(grep -in \"at now -f /var/lib/lxc/one-$VM_ID/init\" /etc/rc.local | cut -d ':' -f 1)" >> /var/lib/lxc/one-$VM_ID/clean
                echo "end_line=\$((\$start_line+1))" >> /var/lib/lxc/one-$VM_ID/clean
		echo "sed \"\$start_line,\$end_line d\" /etc/rc.local > /tmp/rc.local.tmp1 && mv /tmp/rc.local.tmp1 /etc/rc.local" >> /var/lib/lxc/one-$VM_ID/clean
                echo "chmod 755 /etc/rc.local" >> /var/lib/lxc/one-$VM_ID/clean
                echo "fi" >> /var/lib/lxc/one-$VM_ID/clean;;
	BLOCK)	if [ "${VM_DISK_TM_MAD}" = "lvm" ]; then
			LV_SOURCE=$(echo -e "$VM_DISK_SOURCE" | cut -d ':' -f 2 | cut -d '.' -f 2)
			VG_SOURCE=$(echo -e "$VM_DISK_SOURCE" | cut -d ':' -f 2 | cut -d '.' -f 1)
			rootfs="/dev/${VG_SOURCE}/${LV_SOURCE}"
                else
			error_message "Wrong file system type detected for one-$VM_ID"
    			exit -1
                fi
		RC_LOCAL=$(sudo grep "lxc-start -l ERROR -d -n one-$VM_ID" /etc/rc.local)
                if [ -z "$RC_LOCAL" ]; then
                	sudo echo "lxc-start -l ERROR -d -n one-$VM_ID" > /var/lib/lxc/one-$VM_ID/init
                	sudo echo "at now -f /var/lib/lxc/one-$VM_ID/init" > /tmp/rc.local.opennebula_temp
	                sudo echo "#--------------------------------------------" >> /tmp/rc.local.opennebula_temp
        	        line_number=$(grep -in "exit 0" /etc/rc.local | tail -1 | cut -d ':' -f 1)
               		let line_number=line_number-1
                	sudo sed -i "$line_number r /tmp/rc.local.opennebula_temp" /etc/rc.local
		fi
		echo "sleep 5" > /var/lib/lxc/one-$VM_ID/clean
		echo "VM_STATE=\$(lxc-info -n one-$VM_ID | grep State | awk '{ print \$2 }')" >> /var/lib/lxc/one-$VM_ID/clean
                echo "if [ \"\$VM_STATE\" = \"STOPPED\" ]; then" >> /var/lib/lxc/one-$VM_ID/clean
                echo "start_line=\$(grep -in \"at now -f /var/lib/lxc/one-$VM_ID/init\" /etc/rc.local | cut -d ':' -f 1)" >> /var/lib/lxc/one-$VM_ID/clean
                echo "end_line=\$((\$start_line+1))" >> /var/lib/lxc/one-$VM_ID/clean
                echo "sed \"\$start_line,\$end_line d\" /etc/rc.local > /tmp/rc.local.tmp1 && mv /tmp/rc.local.tmp1 /etc/rc.local" >> /var/lib/lxc/one-$VM_ID/clean
                echo "chmod 755 /etc/rc.local" >> /var/lib/lxc/one-$VM_ID/clean
                echo "fi" >> /var/lib/lxc/one-$VM_ID/clean;;
	RBD) if [ "${VM_DISK_CLONE}" = "YES" ]; then
 			VM_DISK_SOURCE="${VM_DISK_SOURCE}-${VM_ID}-0"
			fi
		rootfs=`rbd showmapped | grep $VM_DISK_SOURCE | awk 'NR==1' | awk '{ print $5 }'`
		if [ -z $rootfs ]; then
			sudo -E rbd map $VM_DISK_SOURCE;
                        rootfs=$(rbd showmapped | grep one-$IMAGE_ID | awk 'NR==1' | awk '{ print $5 }')
                fi
		RC_LOCAL=$(sudo grep "lxc-start -l ERROR -d -n one-$VM_ID" /etc/rc.local)
                if [ -z "$RC_LOCAL" ]; then
			echo "rbd map $CEPH_AUTH $VM_DISK_SOURCE" > /tmp/rc.local.opennebula_temp
			echo "rootfs=\$(rbd showmapped | grep one-$IMAGE_ID | awk 'NR==1' | awk '{ print \$5 }')" >> /tmp/rc.local.opennebula_temp
			echo "rootfs=\"lxc.rootfs = \$rootfs\"" >> /tmp/rc.local.opennebula_temp
			echo "line=\$(grep -in rootfs /var/lib/lxc/one-$VM_ID/config | cut -d ':' -f 1)" >> /tmp/rc.local.opennebula_temp
			echo "sed \"\$line d\" /var/lib/lxc/one-$VM_ID/config > /tmp/one-$VM_ID-config-tmp && mv /tmp/one-$VM_ID-config-tmp /var/lib/lxc/one-$VM_ID/config" >> /tmp/rc.local.opennebula_temp
			echo "sed -i \"\$line i \$rootfs\" /var/lib/lxc/one-$VM_ID/config" >> /tmp/rc.local.opennebula_temp
			echo "at now -f /var/lib/lxc/one-$VM_ID/init" >> /tmp/rc.local.opennebula_temp
			echo "lxc-start -l ERROR -d -n one-$VM_ID" > /var/lib/lxc/one-$VM_ID/init
			sudo echo "#--------------------------------------------" >> /tmp/rc.local.opennebula_temp
                	line_number=$(grep -in "exit 0" /etc/rc.local | tail -1 | cut -d ':' -f 1)
			let line_number=line_number-1
                	sudo sed -i "$line_number r /tmp/rc.local.opennebula_temp" /etc/rc.local
		fi
		echo "sleep 5" > /var/lib/lxc/one-$VM_ID/clean
		echo "VM_STATE=\$(lxc-info -n one-$VM_ID | grep State | awk '{ print \$2 }')" >> /var/lib/lxc/one-$VM_ID/clean
                echo "if [ \"\$VM_STATE\" = \"STOPPED\" ]; then" >> /var/lib/lxc/one-$VM_ID/clean
		echo "sudo rbd unmap ${rootfs}" >> /var/lib/lxc/one-$VM_ID/clean
		echo "start_line=\$(grep -in \"rbd map $CEPH_AUTH $VM_DISK_SOURCE\" /etc/rc.local | cut -d ':' -f 1)" >> /var/lib/lxc/one-$VM_ID/clean
                echo "end_line=\$((\$start_line+7))" >> /var/lib/lxc/one-$VM_ID/clean
                echo "sed \"\$start_line,\$end_line d\" /etc/rc.local > /tmp/rc.local.tmp1 && mv /tmp/rc.local.tmp1 /etc/rc.local" >> /var/lib/lxc/one-$VM_ID/clean
		echo "chmod 755 /etc/rc.local" >> /var/lib/lxc/one-$VM_ID/clean
		echo "fi" >> /var/lib/lxc/one-$VM_ID/clean;;

esac

##############################################################################
#                         CREATING HOOKS	                             #
##############################################################################

cat > /var/lib/lxc/one-$VM_ID/start-hook <<EOF
#!/bin/bash
#sed -i s/"lxc.start.auto = 0"/"lxc.start.auto = 1"/g /var/lib/lxc/one-$VM_ID/config
at now -f /var/lib/lxc/one-$VM_ID/vnc
EOF

cat > /var/lib/lxc/one-$VM_ID/stop-hook <<EOF
#!/bin/bash
#sed -i s/"lxc.start.auto = 1"/"lxc.start.auto = 0"/g /var/lib/lxc/one-$VM_ID/config
while read iFACE; do
	ip l del \$iFACE
done < <(ip a | grep "${VM_ID}-" | cut -d ':' -f 2 | cut -d '@' -f 1)
at now -f /var/lib/lxc/one-$VM_ID/clean
EOF

#######
# VNC #
#######

cat > /var/lib/lxc/one-$VM_ID/vnc <<EOF
#!/bin/bash

VM_VNC_PASSWD=${VM_VNC_PASSWD}
sudo lxc-wait -n one-$VM_ID -s RUNNING

EOF

sudo chmod 755 /var/lib/lxc/one-$VM_ID/start-hook
sudo chmod 755 /var/lib/lxc/one-$VM_ID/stop-hook
sudo chmod 755 /var/lib/lxc/one-$VM_ID/vnc
sudo chmod 755 /var/lib/lxc/one-$VM_ID/clean

##############################################################################
#                      GENERATING CONFIG FILE	                             #
##############################################################################
cat > /var/lib/lxc/one-$VM_ID/config <<EOF

# Parameters passed to the template:
# For additional config options, please look at lxc.container.conf(5)
lxc.rootfs = $rootfs

# Common configuration
lxc.include = /usr/share/lxc/config/centos.common.conf

# Container specific configuration
#lxc.mount = /var/lib/lxc/one-$VM_ID/fstab
lxc.arch = amd64
lxc.autodev = 1
lxc.kmsg = 0

# Logs
lxc.console.logfile = /var/lib/lxc/one-$VM_ID/console.log
lxc.logfile = /var/log/one/$VM_ID.log
#lxc.loglevel = ERROR

# CPU
#lxc.cgroup.cpuset.cpus =
#lxc.cgroup.cpu.shares =

# RAM
lxc.cgroup.memory.limit_in_bytes = ${VM_MEMORY}M

# NETWORK
$NET_CONFIG

# Autostart
lxc.start.auto = 0

#hooks
lxc.hook.pre-start = /var/lib/lxc/one-$VM_ID/start-hook
lxc.hook.post-stop = /var/lib/lxc/one-$VM_ID/stop-hook

EOF

##############################################################################
#                               ATACHAR HDDs                                 #
##############################################################################

while read TYPE; do
	DISK_TYPE[z++]="$TYPE"
done < <(xmlstarlet sel -t -v "/VM/TEMPLATE/DISK/TYPE" -n /var/lib/one/vms/${VM_ID}/deployment.$DEPLOY_NUM)

while read SOURCE; do
	DISK_SOURCE[j++]="$SOURCE"
done < <(xmlstarlet sel -t -v "/VM/TEMPLATE/DISK/SOURCE" -n /var/lib/one/vms/${VM_ID}/deployment.$DEPLOY_NUM)

while read CLONE; do
        DISK_CLONE[l++]="$CLONE"
done < <(xmlstarlet sel -t -v "/VM/TEMPLATE/DISK/CLONE" -n /var/lib/one/vms/${VM_ID}/deployment.$DEPLOY_NUM)

while read TM_MAD; do
        DISK_TM_MAD[f++]="$TM_MAD"
done < <(xmlstarlet sel -t -v "/VM/TEMPLATE/DISK/TM_MAD" -n /var/lib/one/vms/${VM_ID}/deployment.$DEPLOY_NUM)

XML_ELEMENT=0
while read DSK_ID; do
if [ $DSK_ID -ne 0 ]; then
let XML_ELEMENT=XML_ELEMENT+1

	case ${DISK_TYPE[${XML_ELEMENT}]} in
        	FILE) loop=$(sudo losetup -f --show /var/lib/one/datastores/${SYSTEM_DATASTORE_ID}/${VM_ID}/disk.$DSK_ID)
			echo "#--------------------Mounting disk $DSK_ID on one-${VM_ID}--------------------#" >> /var/lib/lxc/one-$VM_ID/vnc
			echo "exists=\$(losetup -a | grep $loop | cut -d ':' -f 1)" >> /var/lib/lxc/one-$VM_ID/vnc
			echo "if [ -z \$exists ]; then" >> /var/lib/lxc/one-$VM_ID/vnc
			echo "losetup $loop /var/lib/one/datastores/${SYSTEM_DATASTORE_ID}/${VM_ID}/disk.$DSK_ID" >> /var/lib/lxc/one-$VM_ID/vnc
			echo "fi" >> /var/lib/lxc/one-$VM_ID/vnc
			echo "lxc-device -n one-$VM_ID add $loop" >> /var/lib/lxc/one-$VM_ID/vnc
			echo "lxc-attach -n one-$VM_ID -- mkdir -p /media/$DSK_ID" >> /var/lib/lxc/one-$VM_ID/vnc
			echo "lxc-attach -n one-$VM_ID -- mount $loop /media/$DSK_ID" >> /var/lib/lxc/one-$VM_ID/vnc
			echo "losetup -d ${loop}" >> /var/lib/lxc/one-$VM_ID/clean;;
        	RBD) 	if [ "${DISK_CLONE[${XML_ELEMENT}]}" = "YES" ]; then
                        	DISK_SOURCE[${XML_ELEMENT}]="${DISK_SOURCE[${XML_ELEMENT}]}-${VM_ID}-${DSK_ID}"
                        fi
                	IMAGE_NAME=`echo "${DISK_SOURCE[${XML_ELEMENT}]}" | cut -d '/' -f 2`;
			echo "#--------------------Mounting disk $DSK_ID on one-${VM_ID}--------------------#" >> /var/lib/lxc/one-$VM_ID/vnc
			echo "RBD_DEV=\$(rbd showmapped | grep -m 1 $IMAGE_NAME | awk '{print \$5}')" >> /var/lib/lxc/one-$VM_ID/vnc
			echo "if [ -z \$RBD_DEV ]; then" >> /var/lib/lxc/one-$VM_ID/vnc
			echo "rbd map $CEPH_AUTH \"${DISK_SOURCE[${XML_ELEMENT}]}\"" >> /var/lib/lxc/one-$VM_ID/vnc
			echo "RBD_DEV=\$(rbd showmapped | grep -m 1 $IMAGE_NAME | awk '{print \$5}')" >> /var/lib/lxc/one-$VM_ID/vnc
			echo "fi" >> /var/lib/lxc/one-$VM_ID/vnc
			echo "lxc-device -n one-$VM_ID add \$RBD_DEV" >> /var/lib/lxc/one-$VM_ID/vnc
			echo "lxc-attach -n one-$VM_ID -- mkdir -p /media/$DSK_ID" >> /var/lib/lxc/one-$VM_ID/vnc
			echo "lxc-attach -n one-$VM_ID -- mount \$RBD_DEV /media/$DSK_ID" >> /var/lib/lxc/one-$VM_ID/vnc
			echo "RBD_DEV=\$(rbd showmapped | grep -m 1 $IMAGE_NAME | awk '{print \$5}')" >> /var/lib/lxc/one-$VM_ID/clean
			echo "rbd unmap \$RBD_DEV" >> /var/lib/lxc/one-$VM_ID/clean;;
		BLOCK)  if [ "${DISK_TM_MAD[${XML_ELEMENT}]}" = "lvm" ]; then
				LV_SOURCE=$(echo "${DISK_SOURCE[${XML_ELEMENT}]}" | cut -d ':' -f 2 | cut -d '.' -f 2)
                        	VG_SOURCE=$(echo "${DISK_SOURCE[${XML_ELEMENT}]}" | cut -d ':' -f 2 | cut -d '.' -f 1)
				MOUNT_BLOCK="/dev/${VG_SOURCE}/${LV_SOURCE}"
	                else
       		                error_message "Wrong file system type detected for one-$VM_ID"
                        	exit -1
			fi
			echo "#--------------------Mounting disk $DSK_ID on one-${VM_ID}--------------------#" >> /var/lib/lxc/one-$VM_ID/vnc
			echo "lxc-device -n one-$VM_ID add ${MOUNT_BLOCK}" >> /var/lib/lxc/one-$VM_ID/vnc;
			echo "lxc-attach -n one-$VM_ID -- mkdir -p /media/$DSK_ID" >> /var/lib/lxc/one-$VM_ID/vnc
			echo "lxc-attach -n one-$VM_ID -- mount ${MOUNT_BLOCK} /media/${DSK_ID}" >> /var/lib/lxc/one-$VM_ID/vnc;;
	esac
fi
done < <(xmlstarlet sel -t -v "/VM/TEMPLATE/DISK/DISK_ID" -n /var/lib/one/vms/${VM_ID}/deployment.$DEPLOY_NUM)

cat >> /var/lib/lxc/one-$VM_ID/vnc <<EOF
## VNC

sudo svncterm -timeout 0 -passwd "\${VM_VNC_PASSWD}" -rfbport $VM_VNC_PORT -c lxc-console -n one-$VM_ID &

## Setting the VM Hostname after making sure there are no space chars on the hostname
sleep 3
sudo lxc-attach -e -n one-$VM_ID -- hostname $VM_HOSTNAME_FIXED
EOF

echo "if [ \"\$VM_STATE\" = \"STOPPED\" ]; then" >> /var/lib/lxc/one-$VM_ID/clean
echo "rm -rf /var/lib/lxc/one-${VM_ID}" >> /var/lib/lxc/one-$VM_ID/clean
echo "fi" >> /var/lib/lxc/one-$VM_ID/clean

##############################################################################
#                  	    INICIAR CONTENEDOR VIRTUAL                       #
##############################################################################

#find lv
echo "/var/lib/lxc/one-${VM_ID}/config" >> /var/lib/one/output
cat /var/lib/lxc/one-${VM_ID}/config >> /var/lib/one/output
lvpath=`cat /var/lib/lxc/one-${VM_ID}/config | grep lxc.rootfs | cut -d' ' -f3`
echo "LVPath: $lvpath" >> /var/lib/one/output

sudo lvchange -aey ${lvpath}

sudo -E lxc-start -l DEBUG -d -n one-$VM_ID -f /var/lib/lxc/one-$VM_ID/config

if [ "x$?" = "x0" ]; then
    echo "one-$VM_ID"
else
    error_message "Could not create domain from one-$VM_ID"
    exit -1
fi

VM_STATE=$(sudo lxc-info -n one-$VM_ID | grep State | awk '{ print $2 }')
if [ "$VM_STATE" != "RUNNING" ]; then
	sleep 5
	VM_STATE=$(sudo lxc-info -n one-$VM_ID | grep State | awk '{ print $2 }')
	if [ "$VM_STATE" != "RUNNING" ]; then
		sleep 5
		VM_STATE=$(sudo lxc-info -n one-$VM_ID | grep State | awk '{ print $2 }')
		if [ "$VM_STATE" != "RUNNING" ]; then
			exit -1
		fi
	fi
fi

exit 0

